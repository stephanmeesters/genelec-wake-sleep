name: Build Linux and Windows Packages

on:
  push:
    tags:
      - 'v*.*.*'

env:
  DIST: el7
  ARCH: x86_64

jobs:
  build_tarball:
    name: Build source archive
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create source archive
        run: tar -czvf ${{ vars.PKG_NAME }}-${{ github.ref_name }}-sourcecode.tar.gz *

      - name: Upload source archive
        uses: actions/upload-artifact@v4
        with:
          name: source-archive
          path: ${{ vars.PKG_NAME }}-${{ github.ref_name }}-sourcecode.tar.gz

  build_rpm:
    name: Build .rpm package
    needs: build_tarball
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update spec version
        run: |
          sed -i "s/^Version:.*$/Version:        ${VERSION}/" ${{ vars.PKG_NAME }}.spec

      - name: Build RPM
        id: rpm
        uses: stephanmeesters/rpmbuild@master
        with:
          spec_file: ${{ vars.PKG_NAME }}.spec

      - name: Upload RPM
        uses: actions/upload-artifact@v4
        with:
          name: rpm-package
          path: rpmbuild/RPMS/${{ env.ARCH }}/*.rpm

  build_deb:
    name: Build .deb package
    needs: build_rpm
    runs-on: ubuntu-latest
    steps:
      - name: Download RPM
        uses: actions/download-artifact@v4
        with:
          name: rpm-package

      - name: Convert .rpm to .deb
        run: |
          sudo apt update
          sudo apt install -y alien
          sudo alien -k --verbose --to-deb *.rpm

      - name: Upload DEB
        uses: actions/upload-artifact@v4
        with:
          name: deb-package
          path: ${{ vars.PKG_NAME }}*.deb

  build_windows:
    name: Build Windows packages
    needs: build_tarball
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        run: |
          rustup toolchain install stable
          rustup target add x86_64-pc-windows-msvc aarch64-pc-windows-msvc

      - name: Build Windows x86_64
        run: |
          cargo build --release --target x86_64-pc-windows-msvc
          mkdir output
          cp target/x86_64-pc-windows-msvc/release/*.exe output/${{ vars.PKG_NAME }}-win-x86_64.exe

      - name: Build Windows ARM64
        run: |
          cargo build --release --target aarch64-pc-windows-msvc
          cp target/aarch64-pc-windows-msvc/release/*.exe output/${{ vars.PKG_NAME }}-win-arm64.exe

      - name: Upload Windows packages
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: output/*.exe

  release:
    name: Release
    needs: [build_tarball, build_rpm, build_deb, build_windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download tarball
        uses: actions/download-artifact@v4
        with:
          name: source-archive
          path: release-assets

      - name: Download RPM
        uses: actions/download-artifact@v4
        with:
          name: rpm-package
          path: release-assets

      - name: Download DEB
        uses: actions/download-artifact@v4
        with:
          name: deb-package
          path: release-assets

      - name: Download Windows package
        uses: actions/download-artifact@v4
        with:
          name: windows-package
          path: release-assets

      - name: Create GitHub Release
        run: |
          gh release create "${{ github.ref_name }}" \
            --title "${{ github.ref_name }}" \
            --notes "Automated release for version ${{ github.ref_name }}" \
            release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

